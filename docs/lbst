#include "l.h"
#include "ransrf.h"

#define smaller_ell(A, B) ((sA = A) >= (sB = B) ? 0 : ((sA&sB)<<1) < sB)
#define balanced(A, B) !(smaller_ell(A, (B)>>1))

int Search(key x, lbst t)
{ if (t == null) return 0;
  if (x < t->k) return Search(x, t->l);
  if (x > t->k) return Search(x, t->r);
  return 1;
}

lbst singleton(key x)
{ lbst b = newNode();
  b->k = x; b->l = b->r = null; b->s = 1;
  return b;
}

#define update_size(T) { (T)->s = 1 + (T)->l->s + (T)->r->s; }

lbst rot_right(lbst t)
{ lbst b = t->l; t->l = b->r; b->r = t;
  update_size(t); update_size(b);
  return b;
}

lbst rot_left(lbst t)
{ lbst b = t->r; t->r = b->l; b->l = t;
  update_size(t); update_size(b);
  return b;
}

lbst inc_right(lbst t)
{ size sA, sB;
  if (smaller_ell(t->l->l->s, t->l->r->s)) t->l = rot_left(t->l);
  return rot_right(t);
}

lbst inc_left(lbst t)
{ size sA, sB;
  if (smaller_ell(t->r->r->s, t->r->l->s)) t->r = rot_right(t->r);
  return rot_left(t);
}

lbst Insert(key x, lbst t)
{ size sA, sB;
  if (t == null) return singleton(x);
  t->s++;
  if (x < t->k)
    { t->l = Insert(x, t->l);
      if (!balanced(t->r->s, t->l->s)) t = inc_right(t);
    }
   else
    { t->r = Insert(x, t->r);
      if (!balanced(t->l->s, t->r->s)) t = inc_left(t);
    }
  return t;
}

lbst Create(long n)
{ lbst t = null;
  randomize();
  while (n > 0)
    { t = Insert(randomlong(2000000000L), t);
      n--;
    }
  return t;
}

long IPL(lbst t)
{ if (t == null) return 0;
  return IPL(t->l) + IPL(t->r) + t->s;
}

lbst extract_maximum(lbst t, lbst *u)
{ size sA, sB;
  if (t->r == null) { *u = t; t = t->l; }
   else
    { t->r = extract_maximum(t->r, u);
      t->s--;
      if (!balanced(t->r->s, t->l->s)) t = inc_right(t);
    }
  return t;
}

lbst extract_minimum(lbst t, lbst *u)
{ size sA, sB;
  if (t->l == null) { *u = t; t = t->r; }
   else
    { t->l = extract_minimum(t->l, u);
      t->s--;
      if (!balanced(t->l->s, t->r->s)) t = inc_left(t);
    }
  return t;
}

lbst delete_root(lbst t)
{ node *p;
  if (t->s == 1) { freeNode(t); return null; }
  if (t->l->s > t->r->s)
    { p->l = extract_maximum(t->l, &p);
      p->r = t->r;
    }
   else
    { p->r = extract_minimum(t->r, &p);
      p->l = t->l;
    }
  p->s = t->s - 1;
  freeNode(t);
  return p;
}

lbst Delete(key x, lbst t)
{  size sA, sB;
  if (x == t->k) return delete_root(t);
  t->s--;
  if (x < t->k)
    { t->l = Delete(x, t->l);
      if (!balanced(t->l->s, t->r->s)) t = inc_left(t);
    }
   else
    { t->r = Delete(x, t->r);
      if (!balanced(t->r->s, t->l->s)) t = inc_right(t);
    }
  return t;
}

lbst Lr_join(lbst l, lbst r)
{ size sA, sB;
  node *p;
  if (balanced(r->s, l->s))
    { p->l = extract_maximum(l, &p); p->r = r; update_size(p);
      return p;
    }
  l->r = Lr_join(l->r, r);
  update_size(l);
  if (!balanced(l->l->s, l->r->s)) l = inc_left(l);
  return l;
}

lbst lR_join(lbst l, lbst r)
{ size sA, sB;
  node *p;
  if (balanced(l->s, r->s))
    { p->r = extract_minimum(r, &p); p->l = l; update_size(p);
      return p;
    }
  r->l = lR_join(l, r->l);
  update_size(r);
  if (!balanced(r->r->s, r->l->s)) r = inc_right(r);
  return r;
}

lbst Join(lbst l, lbst r)
{ if (l->s > r->s) return Lr_join(l, r);
  if (r != null)   return lR_join(l, r);
  return null;
}

lbst Lr_build(node *p, lbst l, lbst r)
{ size sA, sB;
  if (balanced(r->s, l->s))
    { p->l = l; p->r = r; update_size(p);
      return p;
    }
  l->r = Lr_build(p, l->r, r);
  update_size(l);
  if (!balanced(l->l->s, l->r->s)) l = inc_left(l);
  return l;
}

lbst lR_build(node *p, lbst l, lbst r)
{ size sA, sB;
  if (balanced(l->s, r->s))
    { p->l = l; p->r = r; update_size(p);
      return p;
    }
  r->l = lR_build(p, l, r->l);
  update_size(r);
  if (!balanced(r->r->s, r->l->s)) r = inc_right(r);
  return r;
}

lbst Build(node *p, lbst l, lbst r)
{ if (l->s > r->s) return Lr_build(p, l, r);
              else return lR_build(p, l, r);
}

int Split(key x, lbst t, lbst *l, lbst *r)
{ lbst b; int i;
  if (t == null) { *l = *r = null; return 0; }
  if (x == t->k) { *l = t->l; *r = t->r; freeNode(t); return 1; }
  if (x < t->k)
    { i = Split(x, t->l, l, &b);
      *r = Build(t, b, t->r);
    }
   else
    { i = Split(x, t->r, &b, r);
      *l = Build(t, t->l, b);
    }
  return i;
}
